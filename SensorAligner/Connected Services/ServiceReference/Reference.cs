//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SensorAligner.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Measurement", Namespace="http://schemas.datacontract.org/2004/07/ConsistentSystem.Common.Models")]
    [System.SerializableAttribute()]
    public partial class Measurement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISensorService", CallbackContract=typeof(SensorAligner.ServiceReference.ISensorServiceCallback))]
    public interface ISensorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetLastMeasurement", ReplyAction="http://tempuri.org/ISensorService/GetLastMeasurementResponse")]
        SensorAligner.ServiceReference.Measurement GetLastMeasurement(string sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetLastMeasurement", ReplyAction="http://tempuri.org/ISensorService/GetLastMeasurementResponse")]
        System.Threading.Tasks.Task<SensorAligner.ServiceReference.Measurement> GetLastMeasurementAsync(string sensorId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/Align")]
        void Align(double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/Align")]
        System.Threading.Tasks.Task AlignAsync(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetSensorName", ReplyAction="http://tempuri.org/ISensorService/GetSensorNameResponse")]
        string GetSensorName(string sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetSensorName", ReplyAction="http://tempuri.org/ISensorService/GetSensorNameResponse")]
        System.Threading.Tasks.Task<string> GetSensorNameAsync(string sensorId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/OnAlignmentStarted")]
        void OnAlignmentStarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/OnAlignmentCompleted")]
        void OnAlignmentCompleted(double alignedValue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorServiceChannel : SensorAligner.ServiceReference.ISensorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SensorServiceClient : System.ServiceModel.DuplexClientBase<SensorAligner.ServiceReference.ISensorService>, SensorAligner.ServiceReference.ISensorService {
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public SensorAligner.ServiceReference.Measurement GetLastMeasurement(string sensorId) {
            return base.Channel.GetLastMeasurement(sensorId);
        }
        
        public System.Threading.Tasks.Task<SensorAligner.ServiceReference.Measurement> GetLastMeasurementAsync(string sensorId) {
            return base.Channel.GetLastMeasurementAsync(sensorId);
        }
        
        public void Align(double value) {
            base.Channel.Align(value);
        }
        
        public System.Threading.Tasks.Task AlignAsync(double value) {
            return base.Channel.AlignAsync(value);
        }
        
        public string GetSensorName(string sensorId) {
            return base.Channel.GetSensorName(sensorId);
        }
        
        public System.Threading.Tasks.Task<string> GetSensorNameAsync(string sensorId) {
            return base.Channel.GetSensorNameAsync(sensorId);
        }
    }
}
