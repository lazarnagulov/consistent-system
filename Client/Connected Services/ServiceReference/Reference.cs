//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISensorService", CallbackContract=typeof(Client.ServiceReference.ISensorServiceCallback))]
    public interface ISensorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetLastMeasurement", ReplyAction="http://tempuri.org/ISensorService/GetLastMeasurementResponse")]
        ConsistentSystem.Common.Models.Measurement GetLastMeasurement(string sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetLastMeasurement", ReplyAction="http://tempuri.org/ISensorService/GetLastMeasurementResponse")]
        System.Threading.Tasks.Task<ConsistentSystem.Common.Models.Measurement> GetLastMeasurementAsync(string sensorId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/Align")]
        void Align(double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/Align")]
        System.Threading.Tasks.Task AlignAsync(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetSensorName", ReplyAction="http://tempuri.org/ISensorService/GetSensorNameResponse")]
        string GetSensorName(string sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetSensorName", ReplyAction="http://tempuri.org/ISensorService/GetSensorNameResponse")]
        System.Threading.Tasks.Task<string> GetSensorNameAsync(string sensorId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/OnAlignmentStarted")]
        void OnAlignmentStarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISensorService/OnAlignmentCompleted")]
        void OnAlignmentCompleted(double alignedValue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorServiceChannel : Client.ServiceReference.ISensorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SensorServiceClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.ISensorService>, Client.ServiceReference.ISensorService {
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SensorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ConsistentSystem.Common.Models.Measurement GetLastMeasurement(string sensorId) {
            return base.Channel.GetLastMeasurement(sensorId);
        }
        
        public System.Threading.Tasks.Task<ConsistentSystem.Common.Models.Measurement> GetLastMeasurementAsync(string sensorId) {
            return base.Channel.GetLastMeasurementAsync(sensorId);
        }
        
        public void Align(double value) {
            base.Channel.Align(value);
        }
        
        public System.Threading.Tasks.Task AlignAsync(double value) {
            return base.Channel.AlignAsync(value);
        }
        
        public string GetSensorName(string sensorId) {
            return base.Channel.GetSensorName(sensorId);
        }
        
        public System.Threading.Tasks.Task<string> GetSensorNameAsync(string sensorId) {
            return base.Channel.GetSensorNameAsync(sensorId);
        }
    }
}
